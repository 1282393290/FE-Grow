/**
 * reduce使用：
 * 可以看到reduce的回调函数中有四个参数，最后一个是调用reduce的数组，
 * 倒数第二个是下标，第一个是默认第一次是数组的第一项，第一次过后，继续遍
 * 历，如果回调函数有返回值，那么就是第一个就是回调函数的返回值，如果不返回
 * 就是underfined，也是回调函数的返回值。第二个是函数的剩余各项。最后reduce
 * 返回的是参数的第一项，即回调函数的最后一次返回值。而不是返回一个数组。
 * 使用的目的：
 * 为什么要弄reduce这么一个方法出来，比如for循环是为了遍历而创建的？
 * 就我使用来看，如果有个需要`计算和`的时候，不需要定义新变量，再用for去遍历
 * 叠
 * 加，而直接使用这个方法就能够计算出最后需要的和值。或者需要`拼接字符串`的
 * 时
 * 候可以将字符串所有的元素作为数组的元素，然后使用该方法可以得到拼接完的字
 * 符串。
 */
const arr1 = [2, 2, 3, 4, 5];//和值计算
const arr2 = ['我', '是', '中', '国', '人'];//拼接字符串
const arrs = (arr) => arr.reduce((a, b, c, d) => {
    console.log(a, b, c, d);
    return a + b;
});
console.log('和值计算：', arrs(arr1));
console.log('拼接字符串：', arrs(arr2));